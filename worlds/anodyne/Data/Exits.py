from typing import TypeAlias

from ..Options import BeachGauntletGate, OverworldGauntletGate, PostgameBlank, OverworldFieldsGate, \
    WindmillEntranceGate, WindmillMiddleGate, WindmillTopGate, PostgameEnd, FieldsGate, EndgameRequirement, CellGate, \
    SuburbGate

from .Regions import Apartment, Beach, Bedroom, Blank, Cell, Circus, Debug, Boss_Rush, Street, Space, Red_Cave, Drawer, \
    Cliff, Crowd, Fields, Terminal, Forest, Happy, Red_Sea, Overworld, Blue, Go, Hotel, Nexus, Suburb, Windmill, \
    RegionEnum

Connection:TypeAlias = tuple[RegionEnum,RegionEnum,list[str]]

all_exits:list[Connection] = [
    (Apartment.floor_1, Suburb.DEFAULT, []),
    (Suburb.DEFAULT, Apartment.floor_1, ["Jump Shoes"]),
    (Apartment.floor_1, Apartment.floor_2, []),
    (Apartment.floor_2, Apartment.floor_1, []),
    (Apartment.floor_1, Apartment.floor_2_top_left, ["Small Key (Apartment):4"]),
    (Apartment.floor_2_top_left, Apartment.floor_1, ["Small Key (Apartment):4"]),
    (Apartment.floor_2, Apartment.floor_3, ["Small Key (Apartment):3", "Jump Shoes"]),
    (Apartment.floor_3, Apartment.floor_2, ["Small Key (Apartment):3", "Jump Shoes"]),
    (Apartment.floor_2_top_left, Apartment.floor_1_top_left, ["Combat"]),
    (Apartment.floor_1_top_left, Apartment.floor_2_top_left, ["Combat"]),
    (Beach.DEFAULT, Fields.DEFAULT, []),
    (Fields.DEFAULT, Beach.DEFAULT, []),
    (Beach.DEFAULT, Red_Sea.DEFAULT, ["Combat"]),
    (Red_Sea.DEFAULT, Beach.DEFAULT, []),
    (Beach.DEFAULT, Beach.gauntlet, ["Combat", BeachGauntletGate.typename()]),
    (Bedroom.entrance, Overworld.DEFAULT, []),
    (Overworld.DEFAULT, Bedroom.entrance, []),
    (Bedroom.entrance, Bedroom.core, ["Combat"]),  #pick up dust
    (Bedroom.core, Bedroom.entrance, ["Combat"]),
    (Bedroom.core, Bedroom.exit, ["Temple Boss Access"]),
    (Bedroom.core, Bedroom.shieldy_room, ["Small Key (Temple of the Seeing One):3"]),
    (Bedroom.exit, Bedroom.after_statue, ["Temple of the Seeing One Statue", "Combat"]),
    (Bedroom.exit, Bedroom.entrance, []),  #return to entrance
    (Overworld.post_windmill, Bedroom.entrance, []),  #return to entrance
    (Bedroom.exit, Overworld.post_windmill,
     ["Temple of the Seeing One Statue", "Small Key (Temple of the Seeing One):3",
      "Combat"]),
    (Overworld.post_windmill, Bedroom.exit,
     ["Temple of the Seeing One Statue", "Small Key (Temple of the Seeing One):3",
      "Combat"]),
    (Bedroom.drawer, Drawer.DEFAULT, ["Progressive Swap:2"]),
    (Drawer.DEFAULT, Bedroom.drawer, ["Progressive Swap:2"]),
    (Bedroom.drawer, Overworld.DEFAULT, ["Progressive Swap:2"]),
    (Overworld.Gauntlet, Bedroom.drawer, ["Progressive Swap:2", "Combat"]),
    (Overworld.DEFAULT, Overworld.Gauntlet, [OverworldGauntletGate.typename(), "Combat"]),
    # The secret windmill doesn't require any keys.
    (Blank.windmill, Fields.DEFAULT, ["Progressive Swap:2"]),
    (Fields.DEFAULT, Blank.windmill, ["Progressive Swap:2"]),
    (Blank.windmill, Drawer.dark, [PostgameBlank.typename()]),
    (Drawer.dark, Blank.windmill, [PostgameBlank.typename()]),
    (Blue.DEFAULT, Go.top, []),
    (Go.top, Blue.DEFAULT, []),
    (Cell.DEFAULT, Cell.past_gate, [CellGate.typename()]),
    (Cell.DEFAULT, Circus.DEFAULT, []),
    (Circus.DEFAULT, Cell.DEFAULT, []),
    (Circus.DEFAULT, Circus.entrance_lake, ["Combat"]),  #Pick up dust
    (Circus.entrance_lake, Circus.entry_gauntlets, ["Jump Shoes"]),
    (Circus.entrance_lake, Circus.past_entrance_lake, ["Small Key (Circus):1"]),
    (Circus.past_entrance_lake, Circus.circlejump_gauntlets, ["Jump Shoes"]),
    (Circus.circlejump_gauntlets, Circus.third_key_gauntlet, ["Small Key (Circus):2"]),
    (Circus.third_key_gauntlet, Circus.boss_gauntlet, ["Small Key (Circus):3"]),
    (Circus.boss_gauntlet, Circus.north_gauntlet, ["Small Key (Circus):4"]),
    (Cell.DEFAULT, Red_Cave.exit, ["Red Grotto Statue"]),
    (Red_Cave.exit, Cell.DEFAULT, ["Red Grotto Statue"]),
    (Cliff.DEFAULT, Forest.DEFAULT, []),
    (Forest.DEFAULT, Cliff.DEFAULT, []),
    (Cliff.DEFAULT, Crowd.floor_2, []),
    (Crowd.floor_2, Cliff.DEFAULT, []),
    (Cliff.DEFAULT, Crowd.jump_challenge, []),
    (Crowd.jump_challenge, Cliff.DEFAULT, []),
    (Cliff.post_windmill, Space.DEFAULT, []),
    (Space.DEFAULT, Cliff.post_windmill, []),
    (Crowd.floor_1, Crowd.exit, ["Defeat The Wall"]),
    (Crowd.exit, Crowd.floor_1, ["Defeat The Wall"]),
    (Crowd.exit, Cliff.post_windmill, ["Mountain Cavern Statue"]),
    (Cliff.post_windmill, Crowd.exit, ["Mountain Cavern Statue"]),
    (Cliff.post_windmill, Crowd.floor_2, []),
    (Cliff.post_windmill, Cliff.DEFAULT, []),
    # Technically this entrance works from floor 2, but only if you've used *this* entrance before, which is
    # logically the same as only this entrance existing.
    (Crowd.floor_3, Crowd.floor_1, []),
    (Crowd.floor_2, Crowd.floor_2_gauntlets, ["Combat", "Jump Shoes"]),
    # Need to get through floor 2 gauntlets to activate gate on top of needing a key, and a second key is needed to get anywhere in floor 3
    (Crowd.floor_2_gauntlets, Crowd.floor_3, ["Small Key (Mountain Cavern):3"]),
    (Crowd.floor_3, Crowd.floor_3_center, ["Small Key (Mountain Cavern):4"]),
    # Return to entrance
    (Crowd.floor_1, Crowd.floor_2, []),
    (Debug.DEFAULT, Nexus.top, []),
    (Nexus.top, Debug.DEFAULT, []),
    (Drawer.dark, Nexus.top, []),
    (Nexus.top, Drawer.dark, []),
    (Fields.DEFAULT, Overworld.west, [OverworldFieldsGate.typename()]),
    (Overworld.west, Fields.DEFAULT, [OverworldFieldsGate.typename()]),
    (Overworld.DEFAULT, Overworld.west, ["Combat"]),
    (Overworld.west, Overworld.DEFAULT, ["Combat"]),
    # The exit that needs rafting
    (Fields.DEFAULT, Fields.East, ["Combat"]),
    (Fields.East, Fields.DEFAULT, []),
    (Fields.East, Forest.DEFAULT, ["Combat"]),
    (Forest.DEFAULT, Fields.East, []),
    (Fields.DEFAULT, Fields.Goldman, ["Miao"]),
    (Fields.Goldman, Fields.East, []),
    (Fields.Goldman, Fields.DEFAULT, ["Miao"]),
    (Fields.DEFAULT, Fields.Lake, ["Combat", "Jump Shoes"]),
    (Fields.DEFAULT, Fields.Past_Gate, [FieldsGate.typename()]),
    (Fields.Past_Gate, Fields.DEFAULT, [FieldsGate.typename()]),
    (Terminal.DEFAULT, Fields.Past_Gate, ["Jump Shoes"]),
    (Fields.Past_Gate, Terminal.DEFAULT, ["Jump Shoes"]),
    (Fields.DEFAULT, Fields.North_Secret_Area, ["Progressive Swap:2"]),
    (Fields.North_Secret_Area, Fields.DEFAULT, ["Progressive Swap:2"]),
    (Fields.DEFAULT, Windmill.entrance, [WindmillEntranceGate.typename()]),
    (Windmill.entrance, Fields.DEFAULT, [WindmillEntranceGate.typename()]),
    (Windmill.entrance, Windmill.DEFAULT, [WindmillMiddleGate.typename(), WindmillTopGate.typename()]),
    (Windmill.DEFAULT, Windmill.entrance, [WindmillMiddleGate.typename(), WindmillTopGate.typename()]),
    (Terminal.top, Terminal.DEFAULT, [EndgameRequirement.typename(), "Defeat Sage"]),
    (Terminal.DEFAULT, Terminal.top, [EndgameRequirement.typename()]),
    (Terminal.top, Go.bottom, ["Defeat Sage"]),
    (Go.bottom, Terminal.top, []),
    # Reverse isn't possible without cheats because of the blocks
    (Go.bottom, Go.top, ["Progressive Swap:1", "GO Color Puzzle"]),
    # Requires beating Blue, which requires Jump Shoes and Combat.
    (Go.top, Happy.DEFAULT, ["Happy Open"]),
    (Happy.DEFAULT, Happy.gauntlet, ["Jump Shoes", "Combat"]),
    # You can clip through the happy blocker.
    (Happy.DEFAULT, Go.top, []),
    (Hotel.roof, Space.DEFAULT, []),
    (Space.DEFAULT, Hotel.roof, []),
    (Space.DEFAULT, Space.Gauntlet, ["Progressive Swap:2", "Combat", "Jump Shoes"]),
    (Space.Gauntlet, Space.DEFAULT, ["Progressive Swap:2"]),
    (Hotel.roof, Hotel.floor_4, ["Jump Shoes"]),
    # Return to entrance
    (Hotel.floor_4, Hotel.roof, []),
    (Hotel.floor_4, Hotel.floor_3, ["Combat", "Jump Shoes", "Small Key (Hotel):1"]),
    (Hotel.floor_3, Hotel.floor_4, ["Combat", "Jump Shoes"]),
    (Hotel.floor_3, Hotel.floor_2, ["Small Key (Hotel):4"]),
    (Hotel.floor_2, Hotel.floor_3, []),
    # Door requires key and has key behind it
    (Hotel.floor_3, Hotel.floor_2_right, ["Small Key (Hotel):6"]),
    (Hotel.floor_2_right, Hotel.floor_3, []),
    (Hotel.floor_2, Hotel.floor_1, []),
    (Hotel.floor_1, Hotel.floor_2, []),
    (Nexus.bottom, Street.DEFAULT, []),
    (Street.DEFAULT, Nexus.bottom, []),
    (Nexus.top, Boss_Rush.DEFAULT, ["Combat", "Jump Shoes"]),
    (Boss_Rush.DEFAULT, Nexus.top, []),
    (Nexus.top, Blank.ending, [PostgameEnd.typename()]),
    (Blank.ending, Nexus.top, [PostgameEnd.typename()]),
    (Overworld.post_windmill, Suburb.DEFAULT, []),
    (Suburb.DEFAULT, Overworld.post_windmill, []),
    (Suburb.DEFAULT, Suburb.past_gate, [SuburbGate.typename()]),
    (Overworld.post_windmill, Overworld.DEFAULT, []),
    (Red_Cave.center, Red_Sea.DEFAULT, []),
    (Red_Sea.DEFAULT, Red_Cave.center, []),
    (Red_Cave.left, Red_Sea.DEFAULT, []),
    (Red_Sea.DEFAULT, Red_Cave.left, ["RedCave-Left"]),
    (Red_Cave.right, Red_Sea.DEFAULT, []),
    (Red_Sea.DEFAULT, Red_Cave.right, ["RedCave-Right"]),
    (Red_Cave.top, Red_Sea.DEFAULT, []),
    (Red_Sea.DEFAULT, Red_Cave.top, ["RedCave-Top"]),
    (Red_Cave.bottom, Red_Sea.DEFAULT, []),
    (Red_Sea.DEFAULT, Red_Cave.bottom, []),
    (Red_Cave.top, Red_Cave.exit, ["Defeat Rogue"]),
    # Return to entrance
    (Red_Cave.exit, Red_Cave.top, []),
    (Cell.DEFAULT, Red_Cave.top, []),
    # Hidden path
    (Red_Cave.Isaac, Red_Sea.DEFAULT, []),
    (Red_Sea.DEFAULT, Red_Cave.Isaac, []),
    (Street.DEFAULT, Overworld.DEFAULT, ["Combat", "Small Key (Street):1"]),
    (Suburb.DEFAULT, Suburb.card_house, ["Combat"]),
    (Suburb.card_house, Suburb.DEFAULT, ["Combat"]),
]

secret_path_connections:list[Connection] = [
    (Fields.Past_Gate, Fields.North_Secret_Area, []),
    (Fields.North_Secret_Area, Fields.Past_Gate, [])
]
